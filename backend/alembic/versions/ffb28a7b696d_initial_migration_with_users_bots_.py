"""Initial migration with users, bots, categories

Revision ID: ffb28a7b696d
Revises: 
Create Date: 2025-07-19 19:03:16.416961

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ffb28a7b696d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('botreviews',
    sa.Column('user_id', sa.UUID(), nullable=True, comment='User who wrote the review'),
    sa.Column('bot_id', sa.UUID(), nullable=False, comment='Bot being reviewed'),
    sa.Column('rating', sa.Integer(), nullable=True, comment='Rating from 1 to 5 stars'),
    sa.Column('review_text', sa.Text(), nullable=True, comment='Optional review text'),
    sa.Column('is_verified_purchase', sa.Boolean(), nullable=True, comment='Whether this user actually purchased the bot'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when the record was last updated'),
    sa.ForeignKeyConstraint(['bot_id'], ['bots.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'bot_id', name='unique_user_bot_review')
    )
    op.create_table('userbotaccesss',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User with access'),
    sa.Column('bot_id', sa.UUID(), nullable=False, comment='Bot being accessed'),
    sa.Column('access_type', sa.String(length=50), nullable=True, comment='Type of access: purchased, trial, subscription, gift'),
    sa.Column('granted_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='When access was granted'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment='When access expires (NULL for permanent)'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Whether access is currently active'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when the record was last updated'),
    sa.ForeignKeyConstraint(['bot_id'], ['bots.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'bot_id', name='unique_user_bot_access')
    )
    op.create_table('executionlogs',
    sa.Column('execution_id', sa.UUID(), nullable=False, comment='Reference to the bot execution'),
    sa.Column('log_level', sa.String(length=20), nullable=True, comment='Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL'),
    sa.Column('message', sa.Text(), nullable=False, comment='Log message content'),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='When the log entry was created'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when the record was last updated'),
    sa.ForeignKeyConstraint(['execution_id'], ['bot_executions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('orderitems',
    sa.Column('order_id', sa.UUID(), nullable=False, comment='Reference to the parent order'),
    sa.Column('bot_id', sa.UUID(), nullable=True, comment='Reference to the purchased bot'),
    sa.Column('quantity', sa.Integer(), nullable=True, comment='Quantity purchased (usually 1 for digital products)'),
    sa.Column('price_at_purchase', sa.DECIMAL(precision=10, scale=2), nullable=False, comment='Price when purchased (for historical accuracy)'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when the record was last updated'),
    sa.ForeignKeyConstraint(['bot_id'], ['bots.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index('idx_user_bot_access_bot_id', table_name='user_bot_access')
    op.drop_index('idx_user_bot_access_user_id', table_name='user_bot_access')
    op.drop_table('user_bot_access')
    op.drop_table('execution_logs')
    op.drop_table('order_items')
    op.drop_table('bot_reviews')
    op.add_column('bot_executions', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when the record was last updated'))
    op.alter_column('bot_executions', 'user_id',
               existing_type=sa.UUID(),
               comment='User who executed the bot',
               existing_nullable=True)
    op.alter_column('bot_executions', 'bot_id',
               existing_type=sa.UUID(),
               comment='Bot that was executed',
               existing_nullable=True)
    op.alter_column('bot_executions', 'execution_status',
               existing_type=sa.VARCHAR(length=50),
               comment='Status: queued, running, completed, failed, cancelled',
               existing_nullable=True,
               existing_server_default=sa.text("'queued'::character varying"))
    op.alter_column('bot_executions', 'input_parameters',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='Bot input parameters as JSON',
               existing_nullable=True)
    op.alter_column('bot_executions', 'output_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='Bot execution results as JSON',
               existing_nullable=True)
    op.alter_column('bot_executions', 'execution_time',
               existing_type=sa.INTEGER(),
               comment='Execution time in seconds',
               existing_nullable=True)
    op.alter_column('bot_executions', 'error_message',
               existing_type=sa.TEXT(),
               comment='Error message if execution failed',
               existing_nullable=True)
    op.alter_column('bot_executions', 'container_id',
               existing_type=sa.VARCHAR(length=255),
               comment='Docker container ID for this execution',
               existing_nullable=True)
    op.alter_column('bot_executions', 'started_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='When execution started',
               existing_nullable=True)
    op.alter_column('bot_executions', 'completed_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='When execution completed',
               existing_nullable=True)
    op.alter_column('bot_executions', 'id',
               existing_type=sa.UUID(),
               comment='Unique identifier for the record',
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.alter_column('bot_executions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='Timestamp when the record was created',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_executions_bot_id', table_name='bot_executions')
    op.drop_index('idx_executions_created_at', table_name='bot_executions')
    op.drop_index('idx_executions_status', table_name='bot_executions')
    op.drop_index('idx_executions_user_id', table_name='bot_executions')
    op.alter_column('bots', 'name',
               existing_type=sa.VARCHAR(length=255),
               comment='Bot name',
               existing_nullable=False)
    op.alter_column('bots', 'description',
               existing_type=sa.TEXT(),
               comment='Short description of what the bot does',
               existing_nullable=True)
    op.alter_column('bots', 'detailed_description',
               existing_type=sa.TEXT(),
               comment='Long description with features and usage instructions',
               existing_nullable=True)
    op.alter_column('bots', 'is_free',
               existing_type=sa.BOOLEAN(),
               comment='Whether the bot is free',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('bots', 'difficulty_level',
               existing_type=sa.VARCHAR(length=50),
               comment='Difficulty level: beginner, intermediate, advanced',
               existing_nullable=True,
               existing_server_default=sa.text("'beginner'::character varying"))
    op.alter_column('bots', 'python_version',
               existing_type=sa.VARCHAR(length=20),
               comment='Required Python version',
               existing_nullable=True,
               existing_server_default=sa.text("'3.9+'::character varying"))
    op.alter_column('bots', 'execution_time_estimate',
               existing_type=sa.INTEGER(),
               comment='Estimated execution time in seconds',
               existing_nullable=True)
    op.alter_column('bots', 'docker_image',
               existing_type=sa.VARCHAR(length=255),
               comment='Docker image name for this bot',
               existing_nullable=True)
    op.alter_column('bots', 'github_repo_url',
               existing_type=sa.VARCHAR(length=255),
               comment='GitHub repository URL',
               existing_nullable=True)
    op.alter_column('bots', 'demo_video_url',
               existing_type=sa.VARCHAR(length=255),
               comment='URL to demo video',
               existing_nullable=True)
    op.alter_column('bots', 'thumbnail_url',
               existing_type=sa.VARCHAR(length=255),
               comment='URL to bot thumbnail image',
               existing_nullable=True)
    op.alter_column('bots', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Whether the bot is available for purchase',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('bots', 'download_count',
               existing_type=sa.INTEGER(),
               comment='Number of times the bot has been downloaded',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('bots', 'rating_average',
               existing_type=sa.NUMERIC(precision=3, scale=2),
               comment='Average rating (0.00 to 5.00)',
               existing_nullable=True,
               existing_server_default=sa.text('0.00'))
    op.alter_column('bots', 'rating_count',
               existing_type=sa.INTEGER(),
               comment='Number of ratings received',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('bots', 'id',
               existing_type=sa.UUID(),
               comment='Unique identifier for the record',
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.alter_column('bots', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='Timestamp when the record was created',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('bots', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='Timestamp when the record was last updated',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_bots_active', table_name='bots')
    op.drop_index('idx_bots_name', table_name='bots')
    op.drop_index('idx_bots_price', table_name='bots')
    op.drop_index('idx_bots_rating', table_name='bots')
    op.create_index(op.f('ix_bots_name'), 'bots', ['name'], unique=False)
    op.add_column('categories', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Timestamp when the record was last updated'))
    op.alter_column('categories', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment="Category name (e.g., 'Productivity', 'File Management')",
               existing_nullable=False)
    op.alter_column('categories', 'description',
               existing_type=sa.TEXT(),
               comment='Detailed description of the category',
               existing_nullable=True)
    op.alter_column('categories', 'icon_url',
               existing_type=sa.VARCHAR(length=255),
               comment='URL to the category icon',
               existing_nullable=True)
    op.alter_column('categories', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Whether the category is currently active',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('categories', 'id',
               existing_type=sa.UUID(),
               comment='Unique identifier for the record',
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.alter_column('categories', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='Timestamp when the record was created',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('categories_name_key', 'categories', type_='unique')
    op.create_index(op.f('ix_categories_name'), 'categories', ['name'], unique=True)
    op.alter_column('orders', 'user_id',
               existing_type=sa.UUID(),
               comment='User who placed the order',
               existing_nullable=True)
    op.alter_column('orders', 'total_amount',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               comment='Total order amount in USD',
               existing_nullable=False)
    op.alter_column('orders', 'stripe_payment_intent_id',
               existing_type=sa.VARCHAR(length=255),
               comment='Stripe payment intent ID for tracking',
               existing_nullable=True)
    op.alter_column('orders', 'payment_status',
               existing_type=sa.VARCHAR(length=50),
               comment='Payment status: pending, completed, failed, refunded',
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('orders', 'order_status',
               existing_type=sa.VARCHAR(length=50),
               comment='Order status: processing, completed, cancelled',
               existing_nullable=True,
               existing_server_default=sa.text("'processing'::character varying"))
    op.alter_column('orders', 'id',
               existing_type=sa.UUID(),
               comment='Unique identifier for the record',
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.alter_column('orders', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='Timestamp when the record was created',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('orders', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='Timestamp when the record was last updated',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_orders_created_at', table_name='orders')
    op.drop_index('idx_orders_status', table_name='orders')
    op.drop_index('idx_orders_user_id', table_name='orders')
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=255),
               comment="User's email address",
               existing_nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               comment='Username for the user',
               existing_nullable=False)
    op.alter_column('users', 'password_hash',
               existing_type=sa.VARCHAR(length=255),
               comment='Hashed password for the user',
               existing_nullable=False)
    op.alter_column('users', 'first_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               comment="User's first name",
               existing_nullable=True)
    op.alter_column('users', 'last_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               comment="User's last name",
               existing_nullable=True)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Indicates if the user account is active',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('users', 'is_verified',
               existing_type=sa.BOOLEAN(),
               comment="Indicates if the user's email is verified",
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'subscription_tier',
               existing_type=sa.VARCHAR(length=50),
               comment="User's subscription level (free, premium, enterprise)",
               existing_nullable=True,
               existing_server_default=sa.text("'free'::character varying"))
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               comment='Unique identifier for the record',
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='Timestamp when the record was created',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               comment='Timestamp when the record was last updated',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_users_email', table_name='users')
    op.drop_index('idx_users_username', table_name='users')
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.drop_constraint('users_username_key', 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('users_username_key', 'users', ['username'])
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.create_index('idx_users_username', 'users', ['username'], unique=False)
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Timestamp when the record was last updated',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Timestamp when the record was created',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Unique identifier for the record',
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.alter_column('users', 'subscription_tier',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment="User's subscription level (free, premium, enterprise)",
               existing_nullable=True,
               existing_server_default=sa.text("'free'::character varying"))
    op.alter_column('users', 'is_verified',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment="Indicates if the user's email is verified",
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Indicates if the user account is active',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('users', 'last_name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               comment=None,
               existing_comment="User's last name",
               existing_nullable=True)
    op.alter_column('users', 'first_name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               comment=None,
               existing_comment="User's first name",
               existing_nullable=True)
    op.alter_column('users', 'password_hash',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Hashed password for the user',
               existing_nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Username for the user',
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment="User's email address",
               existing_nullable=False)
    op.create_index('idx_orders_user_id', 'orders', ['user_id'], unique=False)
    op.create_index('idx_orders_status', 'orders', ['order_status'], unique=False)
    op.create_index('idx_orders_created_at', 'orders', ['created_at'], unique=False)
    op.alter_column('orders', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Timestamp when the record was last updated',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('orders', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Timestamp when the record was created',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('orders', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Unique identifier for the record',
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.alter_column('orders', 'order_status',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Order status: processing, completed, cancelled',
               existing_nullable=True,
               existing_server_default=sa.text("'processing'::character varying"))
    op.alter_column('orders', 'payment_status',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Payment status: pending, completed, failed, refunded',
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('orders', 'stripe_payment_intent_id',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Stripe payment intent ID for tracking',
               existing_nullable=True)
    op.alter_column('orders', 'total_amount',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               comment=None,
               existing_comment='Total order amount in USD',
               existing_nullable=False)
    op.alter_column('orders', 'user_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='User who placed the order',
               existing_nullable=True)
    op.drop_index(op.f('ix_categories_name'), table_name='categories')
    op.create_unique_constraint('categories_name_key', 'categories', ['name'])
    op.alter_column('categories', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Timestamp when the record was created',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('categories', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Unique identifier for the record',
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.alter_column('categories', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Whether the category is currently active',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('categories', 'icon_url',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='URL to the category icon',
               existing_nullable=True)
    op.alter_column('categories', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Detailed description of the category',
               existing_nullable=True)
    op.alter_column('categories', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment="Category name (e.g., 'Productivity', 'File Management')",
               existing_nullable=False)
    op.drop_column('categories', 'updated_at')
    op.drop_index(op.f('ix_bots_name'), table_name='bots')
    op.create_index('idx_bots_rating', 'bots', ['rating_average'], unique=False)
    op.create_index('idx_bots_price', 'bots', ['price'], unique=False)
    op.create_index('idx_bots_name', 'bots', ['name'], unique=False)
    op.create_index('idx_bots_active', 'bots', ['is_active'], unique=False)
    op.alter_column('bots', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Timestamp when the record was last updated',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('bots', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Timestamp when the record was created',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('bots', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Unique identifier for the record',
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.alter_column('bots', 'rating_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Number of ratings received',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('bots', 'rating_average',
               existing_type=sa.NUMERIC(precision=3, scale=2),
               comment=None,
               existing_comment='Average rating (0.00 to 5.00)',
               existing_nullable=True,
               existing_server_default=sa.text('0.00'))
    op.alter_column('bots', 'download_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Number of times the bot has been downloaded',
               existing_nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('bots', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Whether the bot is available for purchase',
               existing_nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('bots', 'thumbnail_url',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='URL to bot thumbnail image',
               existing_nullable=True)
    op.alter_column('bots', 'demo_video_url',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='URL to demo video',
               existing_nullable=True)
    op.alter_column('bots', 'github_repo_url',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='GitHub repository URL',
               existing_nullable=True)
    op.alter_column('bots', 'docker_image',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Docker image name for this bot',
               existing_nullable=True)
    op.alter_column('bots', 'execution_time_estimate',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Estimated execution time in seconds',
               existing_nullable=True)
    op.alter_column('bots', 'python_version',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='Required Python version',
               existing_nullable=True,
               existing_server_default=sa.text("'3.9+'::character varying"))
    op.alter_column('bots', 'difficulty_level',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Difficulty level: beginner, intermediate, advanced',
               existing_nullable=True,
               existing_server_default=sa.text("'beginner'::character varying"))
    op.alter_column('bots', 'is_free',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Whether the bot is free',
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('bots', 'detailed_description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Long description with features and usage instructions',
               existing_nullable=True)
    op.alter_column('bots', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Short description of what the bot does',
               existing_nullable=True)
    op.alter_column('bots', 'name',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Bot name',
               existing_nullable=False)
    op.create_index('idx_executions_user_id', 'bot_executions', ['user_id'], unique=False)
    op.create_index('idx_executions_status', 'bot_executions', ['execution_status'], unique=False)
    op.create_index('idx_executions_created_at', 'bot_executions', ['created_at'], unique=False)
    op.create_index('idx_executions_bot_id', 'bot_executions', ['bot_id'], unique=False)
    op.alter_column('bot_executions', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Timestamp when the record was created',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('bot_executions', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Unique identifier for the record',
               existing_nullable=False,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.alter_column('bot_executions', 'completed_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='When execution completed',
               existing_nullable=True)
    op.alter_column('bot_executions', 'started_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='When execution started',
               existing_nullable=True)
    op.alter_column('bot_executions', 'container_id',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Docker container ID for this execution',
               existing_nullable=True)
    op.alter_column('bot_executions', 'error_message',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Error message if execution failed',
               existing_nullable=True)
    op.alter_column('bot_executions', 'execution_time',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Execution time in seconds',
               existing_nullable=True)
    op.alter_column('bot_executions', 'output_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='Bot execution results as JSON',
               existing_nullable=True)
    op.alter_column('bot_executions', 'input_parameters',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='Bot input parameters as JSON',
               existing_nullable=True)
    op.alter_column('bot_executions', 'execution_status',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Status: queued, running, completed, failed, cancelled',
               existing_nullable=True,
               existing_server_default=sa.text("'queued'::character varying"))
    op.alter_column('bot_executions', 'bot_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Bot that was executed',
               existing_nullable=True)
    op.alter_column('bot_executions', 'user_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='User who executed the bot',
               existing_nullable=True)
    op.drop_column('bot_executions', 'updated_at')
    op.create_table('bot_reviews',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('bot_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('review_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_verified_purchase', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name='bot_reviews_rating_check'),
    sa.ForeignKeyConstraint(['bot_id'], ['bots.id'], name='bot_reviews_bot_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='bot_reviews_user_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='bot_reviews_pkey'),
    sa.UniqueConstraint('user_id', 'bot_id', name='bot_reviews_user_id_bot_id_key')
    )
    op.create_table('order_items',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('order_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('bot_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('price_at_purchase', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['bot_id'], ['bots.id'], name='order_items_bot_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='order_items_order_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='order_items_pkey')
    )
    op.create_table('execution_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('execution_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('log_level', sa.VARCHAR(length=20), server_default=sa.text("'INFO'::character varying"), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['execution_id'], ['bot_executions.id'], name='execution_logs_execution_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='execution_logs_pkey')
    )
    op.create_table('user_bot_access',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('bot_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('access_type', sa.VARCHAR(length=50), server_default=sa.text("'purchased'::character varying"), autoincrement=False, nullable=True),
    sa.Column('granted_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['bot_id'], ['bots.id'], name='user_bot_access_bot_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_bot_access_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_bot_access_pkey'),
    sa.UniqueConstraint('user_id', 'bot_id', name='user_bot_access_user_id_bot_id_key')
    )
    op.create_index('idx_user_bot_access_user_id', 'user_bot_access', ['user_id'], unique=False)
    op.create_index('idx_user_bot_access_bot_id', 'user_bot_access', ['bot_id'], unique=False)
    op.drop_table('orderitems')
    op.drop_table('executionlogs')
    op.drop_table('userbotaccesss')
    op.drop_table('botreviews')
    # ### end Alembic commands ###
